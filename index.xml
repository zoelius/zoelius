<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>imx&#39;s blog</title>
    <link>https://zoelius.github.io/</link>
    <description>Recent content on imx&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 27 Aug 2019 16:53:53 +0800</lastBuildDate>
    
        <atom:link href="https://zoelius.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://zoelius.github.io/about/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://zoelius.github.io/about/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;成功只有一个——按照自己的方式，度过自己的生命。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>Git常用命令</title>
      <link>https://zoelius.github.io/post/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 27 Aug 2019 16:53:53 +0800</pubDate>
      
      <guid>https://zoelius.github.io/post/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      
        <description>

&lt;h2 id=&#34;git常用命令&#34;&gt;Git常用命令&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;  初始化本地代码仓库&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin &amp;lt;服务器地址&amp;gt;&lt;/code&gt; 将本地目录链接到远程服务器的代码仓库，这样所有的更改都可以提交到远程仓库&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;    列出所有已添加的文件/目录，或是被修改和需要提交的文件/目录&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add *&lt;/code&gt;或&lt;code&gt;git add &amp;lt;文件名&amp;gt;&lt;/code&gt; 添加文件/目录才能追踪本地文件，才可以被提交&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m &amp;quot;提交信息&amp;quot;&lt;/code&gt;  提交更改，并生成可识别更新代码的提交ID&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push origin master&lt;/code&gt;    将最后一次提交的代码推送到远程代码仓库&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本地创建分支    &lt;code&gt;git branch  branchName&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看现有分支    &lt;code&gt;git branch&lt;/code&gt;   列出来的*表示当前分支&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;切换分支  &lt;code&gt;git checkout 分支名&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Windows&#43;hugo&#43;github搭建个人博客</title>
      <link>https://zoelius.github.io/post/windows&#43;hugo&#43;github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 23 Aug 2019 16:59:06 +0800</pubDate>
      
      <guid>https://zoelius.github.io/post/windows&#43;hugo&#43;github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      
        <description>

&lt;h2 id=&#34;一-hugo下载地址-https-github-com-gohugoio-hugo-releases&#34;&gt;一、hugo下载地址：&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;https://github.com/gohugoio/hugo/releases&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;选择对应的最新zip包，我下载的是&lt;a href=&#34;https://github.com/gohugoio/hugo/releases/download/v0.57.2/hugo_0.57.2_Windows-64bit.zip&#34;&gt;hugo_0.57.2_Windows-64bit.zip&lt;/a&gt; (ps.下面的extended包不用下载)，下载完成后，解压待用。&lt;/p&gt;

&lt;p&gt;创建文件夹。此处举例：F盘创建 &lt;strong&gt;hugo/bin&lt;/strong&gt;，将解压后的&lt;strong&gt;hugo.exe&lt;/strong&gt;放到&lt;strong&gt;bin&lt;/strong&gt;目录下。&lt;/p&gt;

&lt;p&gt;配置系统环境变量，将&lt;strong&gt;F:\hugo\bin&lt;/strong&gt;加入到&lt;strong&gt;path&lt;/strong&gt;变量中，注意两点：1、路径后记得加英文分号 ; 2、是&lt;strong&gt;path&lt;/strong&gt;，不是CLASSPATH，要区分下&lt;/p&gt;

&lt;p&gt;以上设置好后，就可以在cmd中查看是否安装成功。执行命令：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo version
Hugo Static Site Generator v0.57.2-A849CB2D windows/amd64 BuildDate: 2019-08-17T17:54:13Z&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;二-生成站点&#34;&gt;二、生成站点&lt;/h2&gt;

&lt;p&gt;进入F:\hugo下，打开命令窗口。&lt;/p&gt;

&lt;p&gt;执行命令：&lt;strong&gt;&lt;code&gt;hugo new site&lt;/code&gt;&lt;/strong&gt; 文件名称 (如blog)&lt;/p&gt;

&lt;p&gt;执行后，在hugo目录下就会生成一个 名叫blog的站点文件夹&lt;/p&gt;

&lt;p&gt;进入blog后，显示以下目录结构：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;archetypes&lt;/li&gt;
&lt;li&gt;content&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;layouts&lt;/li&gt;
&lt;li&gt;static&lt;/li&gt;
&lt;li&gt;themes&lt;/li&gt;
&lt;li&gt;config.toml&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;三-创建文章&#34;&gt;三、创建文章&lt;/h2&gt;

&lt;p&gt;进入blog目录下，执行命令：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo new post/test.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;执行后，会自动在content/post下生成 test.md文件，打开可编辑内容，ps.文件头部的draft要改为false，这样部署后才能看到页面内容&lt;/p&gt;

&lt;p&gt;当前网站是没有任何内容的，需要下载个主题跑起来才有内容。&lt;/p&gt;

&lt;h2 id=&#34;四-下载主题&#34;&gt;四、下载主题&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;$ &lt;strong&gt;cd themes&lt;/strong&gt; (进入&lt;strong&gt;站点的themes&lt;/strong&gt;目录&amp;gt;&lt;/p&gt;

&lt;p&gt;$ &lt;strong&gt;git clone&lt;/strong&gt; &lt;a href=&#34;https://github.com/spf13/hyde.git&#34;&gt;https://github.com/spf13/hyde.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(可去&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io&lt;/a&gt;官网选择其他皮肤下载)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样themes目录下就多了一个文件夹，文件夹名称即为主题名称&lt;/p&gt;

&lt;p&gt;注：可在主题下的&lt;strong&gt;archetypes&lt;/strong&gt;文件夹中的&lt;strong&gt;default.md&lt;/strong&gt; 设定文章预设模板，建立新文章的时候就会套用这个模板&lt;/p&gt;

&lt;p&gt;进入&lt;strong&gt;站点根目录&lt;/strong&gt;blog下，执行命令：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo server &amp;ndash;theme=hyde (ps.此处的主题名要换成自己下载的)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（注：如果已经在 config.toml 中配置指定主题可省略 &amp;ndash;theme参数。&lt;strong&gt;theme&lt;/strong&gt;也要改成自己的，如theme = &amp;ldquo;hyde&amp;rdquo;，没有theme就自己加上）&lt;/p&gt;

&lt;p&gt;执行后显示&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;此处省略上方信息&lt;/p&gt;

&lt;p&gt;Web Server is available at &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; (bind address 127.0.0.1)
Press Ctrl+C to stop&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可访问：&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; 查看效果&lt;/p&gt;

&lt;h2 id=&#34;五-部署github-pages上&#34;&gt;五、部署github pages上&lt;/h2&gt;

&lt;p&gt;前提：已经注册github账号，并且建立好了仓库（这一块请自行百度）&lt;/p&gt;

&lt;p&gt;站点目录&lt;strong&gt;config.toml&lt;/strong&gt;中&lt;strong&gt;baseURL&lt;/strong&gt;要换成自己建立的仓库&amp;rdquo;&lt;a href=&#34;https://YOURNAME.github.io/&amp;quot;&#34;&gt;https://YOURNAME.github.io/&amp;quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;进入&lt;strong&gt;站点根目录&lt;/strong&gt;下，执行：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;执行后，站点根目录下会生成一个 public 文件夹，该文件夹的内容即Hugo生成的整个静态网站。将 pubilc 目录里所有文件 push 到刚创建的 Repository 的 master 分支。&lt;/p&gt;

&lt;p&gt;在 pbulic 文件夹内建立 .git 。首次使用的时候要执行以下命令：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ &lt;strong&gt;cd public&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$ git init&lt;/p&gt;

&lt;p&gt;$ git remote add origin &lt;a href=&#34;https://github.com/coderzh/coderzh.github.io.git&#34;&gt;https://github.com/coderzh/coderzh.github.io.git&lt;/a&gt; (换成自己的)&lt;/p&gt;

&lt;p&gt;$ git add -A&lt;/p&gt;

&lt;p&gt;$ git commit -m &amp;ldquo;first commit&amp;rdquo;&lt;/p&gt;

&lt;p&gt;$ git push -u origin master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以后每次运行 hugo 命令之后，使用如下命令将本地更新推送到 GitHub：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ git add -A&lt;/p&gt;

&lt;p&gt;$ git commit -m &amp;ldquo;修改内容什么的&amp;rdquo;&lt;/p&gt;

&lt;p&gt;$ git push -u orgin master (此处极易出错，error了就百度吧，问题千奇百怪)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之后就可以到GitHub上看master分支提交的内容，也可访问 YOURNAME.github.io看页面了。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;整个环境部署好之后，接下来的常用命令就是以下几个：&lt;/p&gt;

&lt;p&gt;站点目录下(或到post目录下，post下不用加路径)，&lt;/p&gt;

&lt;p&gt;新建文章，执行：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo new post/文章名.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加文章内容，或者修修改改，包括修改主题之类的，在本地都可以实时看到&lt;/p&gt;

&lt;p&gt;&lt;font color=&#39;red&#39;&gt;修改完成，确定要上传到GitHub上后，&lt;strong&gt;站点目录下&lt;/strong&gt;执行&lt;/font&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;进行编译，修改的内容就同步到public下了，然后&lt;code&gt;cd到public&lt;/code&gt;下，执行提交：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ git add -A&lt;/p&gt;

&lt;p&gt;$ git commit -m &amp;ldquo;first commit&amp;rdquo;&lt;/p&gt;

&lt;p&gt;$ git push -u origin master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;至此OK，顺利的话应该是一步到位的。若是遇到问题的话再百度咯&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
